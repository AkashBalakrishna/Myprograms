// Creates the tree using Level Order Insertion, Insertion happens efficiently by having the reference to the next empty node
// Hence avoiding the tree traversal from the node every insertion

let arr = [1,2,3,4,5,6,7];

let tree = createTree(arr);
console.log(tree);

function createTree(arr){
  let queue = [];
  
  let addNode = (item) => {
    let inserted = false;
      while(queue.length && !inserted){
        let node = queue[0];
        if(!node.left){
          node.left = {val: item, left: undefined, right: undefined};
          inserted = true;
          queue.push(node.left);
        }
        else if(!node.right){
          node.right = {val: item, left: undefined, right: undefined}
          inserted = true;
          queue.push(node.right);
        }
        if(node.right && node.left){
          queue.shift();
        }
      }
  }

  let node = {val: arr.shift(), left: undefined, right: undefined};
  queue.push(node);

  for (const item of arr) {
    addNode(item);
  }
  return node;
}

